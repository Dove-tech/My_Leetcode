question:
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]



solution:
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        def dfs(candidates, target, s, current, ans):
            if target == 0:
                ans.append(current[:])
                return ans
            
            for i in range(s, len(candidates)):
                if candidates[i] > target:
                    return  （return会退出整个循环，continue会退出当前循环的这一层，进入循环的下一层）
                
             
                if (i>s and candidates[i] == candidates[i-1]):
                    continue    # 意思是如果这两个数字相同，我就不把第二个当成我cur中的第一个了（或者是同一层递归中的那一个），因为
                    会和之前的重复。（理解为不让cur中的第一个数据重复会更容易理解这句话）
                    
                current.append(candidates[i])
                dfs(candidates, target - candidates[i], i+1, current, ans)
                current.pop()
        ans = []
        candidates.sort()
        dfs(candidates, target, 0, [], ans)

        return ans
        
这个题相对于39题有两个变化，首先是数据不可以重复使用了，所以从i开始遍历的时候要从i+1开始，另外就是数据集中本身就存在重复的数，所以可能会出现输出
[2,5,5]的情况，因此我们增加了一个判断，让相同的数据在同一层不可以重复使用（在排序后，重复的数据会紧挨着）
