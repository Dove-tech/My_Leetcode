question:


Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

    All numbers will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]



solution:
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def dfs(candidates, k, s, current, n, ans):
            if k == 0: 
                if n == 0:
                    ans.append(current[:])
                    return
            for i in range(s, len(candidates)):
                if candidates[i]>n:
                    return
                current.append(candidates[i])
                dfs(candidates, k-1, i+1, current, n-candidates[i], ans)
                current.pop()
        
        
        
        candidates = [i for i in range(1,10)]
        ans = []
        dfs(candidates, k, 0, [], n, ans)
        return ans
        
 这个题中对个数进行了限制，所以我们的终止条件很重要，当k==0的时候必须返回，无论结果如何
 随后递归的过程中用k-1的方法进行递归，从而省略了len（current）的判断
 其实这个题因为数组只是从1到9，因此我们不必要建立一个candidates的数组，循环的时候直接用一个for就可以了
 
