question:
Print a binary tree in an m*n 2D string array following these rules:

    The row number m should be equal to the height of the given binary tree.
    The column number n should always be an odd number.
    The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them.
    Each unused space should contain an empty string "".
    Print the subtrees following the same rules.

Example 1:

Input:
     1
    /
   2
Output:
[["", "1", ""],
 ["2", "", ""]]

Example 2:

Input:
     1
    / \
   2   3
    \
     4
Output:
[["", "", "", "1", "", "", ""],
 ["", "2", "", "", "", "3", ""],
 ["", "", "4", "", "", "", ""]]

Example 3:

Input:
      1
     / \
    2   5
   / 
  3 
 / 
4 
Output:

[["",  "",  "", "",  "", "", "", "1", "",  "",  "",  "",  "", "", ""]
 ["",  "",  "", "2", "", "", "", "",  "",  "",  "",  "5", "", "", ""]
 ["",  "3", "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]
 ["4", "",  "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]]

Note: The height of binary tree is in the range of [1, 10]. 


solution:
class Solution:
    def printTree(self, root: TreeNode) -> List[List[str]]:
        h = self.get_hight(root)
        w = 2**h - 1
        ans = [["" for i in range(w)] for j in range(h)] 
        self.fill(root, ans, 0, w, 0, w)
        return ans 
        
        
        
    def get_hight(self, root):
        if not root:
            return 0
        return max(self.get_hight(root.left), self.get_hight(root.right)) + 1
    
    
    def fill(self, root, ans, h, w, l, r):
        if not root:
            return
        mid = l + (r-l)//2
        ans[h][mid] = str(root.val)
        self.fill(root.left,ans,h+1,w,l,mid-1)
        self.fill(root.right,ans,h+1,w,mid+1,r)
 
 首先这个题的题意比较长，但是可以通过直接看例子看出这个题目的意思。
 随后总结出规律后，我们采用递归+二分法的方法（因为可以看出，通过二分法逐渐减小区间，然后把数据填充在每个区间的mid即可）
 首先是用递归获得高度和宽度，进而创建大小合适的字符串列表
 随后进行用二分法+递归往里面填充数据即可
 
