question：
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL

Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL


solution：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def oddEvenList(self, head: ListNode) -> ListNode:
        dummy1 = cur_odd = ListNode(0)
        dummy2 = cur_even = ListNode(0)  #让链表的dummy和各自的cur在各自的链表上，而不要指向同一个

        while head:
            cur_odd.next = head
            cur_even.next = head.next
            cur_odd = cur_odd.next
            cur_even = cur_even.next
            head = head.next.next if cur_even else None
            
        cur_odd.next = dummy2.next
        return dummy1.next
    
# 不能写成dummy1 = dummy2 = ListNode(0)，因为这会导致这两个点指向同一个node，而不能实现我想拥有两条链表的想法
            
这个题看起来简单，用双指针即可，但是首先不能像之前自己写的那样用两个while分别计算odd和even的部分，这样会导致当你处理even的时候，此时的链表已经
不是原来的链表了
所以最好是放在一个while中进行遍历，这样不容易出错。
另外就是在进行dummy赋值的时候，一定要小心一点，不要随便赋值，例如dummy1和dummy2是两个不同的链表，不要图省事用dummy1 = dummy2 = listnode（0）
时间复杂度是On,空间复杂度是O1
