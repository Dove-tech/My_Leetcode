question:
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Note:

    You may assume that all inputs are consist of lowercase letters a-z.
    All inputs are guaranteed to be non-empty strings.



solution_1:
class Trie(object):

	def __init__(self):
		self.trie = {}  #采用字典中的value也是字典的方法，也即字典嵌套（只能用于动态语言python）


	def insert(self, word):
		t = self.trie
		for c in word:
			if c not in t: t[c] = {}
			t = t[c]
		t["-"] = True


	def search(self, word):
		t = self.trie
		for c in word:
			if c not in t: return False
			t = t[c]
		if "-" in t: return True

	def startsWith(self, prefix):
		t = self.trie
		for c in prefix:
			if c not in t: return False
			t = t[c]
		return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)


方法1采用了python作为动态语言独有的方法：字典嵌套字典。word中的每一个字c其对应的value都是一个字典，最后添加一个"-"其value是True，用来进行search


solution_2:
    def __init__(self):
        self.trie = ""
        self.dic = {}
    
    def insert(self, word):
        t = self.trie
        d = self.dic
        for i in word:
            t = t + i
            if t not in d:
                d[t] = True
        d[t+'_'] = True
                
    def search(self, word):
        t = self.trie
        d = self.dic
        if word in d and (word+'_') in d:
            return True
        
    def startsWith(self, prefix):
        t = self.trie
        d = self.dic
        if prefix in d:
            return True
采用前缀树的方法，每加入一个新单词，就遍历其前缀并加入字典中，这样search和startswith就很方便查找，直接在字典中查找就行。
为了区分search和startswith，在完整的单词后面加入一个'_'，表明这个是完整的单词
字符串的拼接直接用+即可
注意，list不能作为hashtable的key
