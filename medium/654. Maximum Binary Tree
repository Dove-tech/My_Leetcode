question：
 Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:

    The root is the maximum number in the array.
    The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.
    The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.

Construct the maximum tree by the given array and output the root node of this tree.

Example 1:

Input: [3,2,1,6,0,5]
Output: return the tree root node representing the following tree:

      6
    /   \
   3     5
    \    / 
     2  0   
       \
        1

Note:

    The size of the given array will be in the range [1,1000].


solution:
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
        if nums is None or len(nums)==0:#这里终止条件很重要，两种情况都要包含
            return None
        root_value = max(nums)
        root_index = nums.index(root_value)
        
        root = TreeNode(root_value)
        root.left = (self.constructMaximumBinaryTree(nums[0:root_index]))
        root.right = (self.constructMaximumBinaryTree(nums[root_index+1:]))
        
        return root
        
        
首先确定Treenode这个类，虽然题目中本身已经给出了，但是面试的时候要自己记得写上去
本题采用递归的方式，通过递归一层一层得到这个树，要注意递归的终止条件很重要！一个是子节点是空，或者长度为0

时间复杂度：调用max为On，创建树为On，在每次最大值都是中间的情况下，就像快排一样，只需要循环（递归深度）logn次就可了，所以总体为nlogn
最坏情况就是每次最大值在边缘，这意味着没个数都要被循环到一次（递归深度变大），所以就是执行了n次，所以总体为n*n
