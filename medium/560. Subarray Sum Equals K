question:
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2

Note:

    The length of the array is in range [1, 20,000].
    The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
    

solution:
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        dic = collections.Counter()
        dic[0] = 1
        cur_sum = 0
        ans = 0
        for i in range(len(nums)):
            cur_sum += nums[i]
            ans += dic[cur_sum - k]
            dic[cur_sum] += 1
        return ans
        
这个题采用BF是会超时的，也就是我们去计算所有从i到j的和
可以选择采用hashtable和prefix sum（前缀和）结合的方法来做这个题，prefix sum是一种很常见的方法，意思是从0到i的和
这个题的思路如下，计算从0到i的prefix sum，然后用一个哈希表记录所有出现的prefix sum的出现次数
每计算并记录一个prefix sum， 就看一下prefix sum - k一共出现了多少次，加在ans上，最后的ans就是一共有多少subarray

Keep tracking the prefix sums and their counts.

s -> count: how many arrays nums[0:j] (j < i) that has sum of s

cur_sum = sum(nums[0:i])

check how many arrays nums[0:j] (j < i) that has sum (cur_sum – k)

then there are the same number of arrays nums[j+1: i] that have sum k.

注意在开始创建hashtable的时候，0已经出现过1次了，所以要dic[0]=1
