question:
Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true

Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false

Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false



solution:
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if not p and not q:
            return True
        if not p or not q:
            return False
        l = self.isSameTree(p.left,q.left)
        r = self.isSameTree(p.right,q.right)
        return p.val == q.val and l and r
        
思路的话，首先判断是否俩个根都是空，然后判断是否一个是空另一个不是空，在两个都不是空得情况下我们才能使用递归的方法，所以前面的两个判断还是很有必要的
后面的这个return p.val == q.val and l and r，需要自己思考一下

