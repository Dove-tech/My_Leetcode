question:
Implement the following operations of a queue using stacks.

    push(x) -- Push element x to the back of queue.
    pop() -- Removes the element from in front of queue.
    peek() -- Get the front element.
    empty() -- Return whether the queue is empty.

Example:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // returns 1
queue.pop();   // returns 1
queue.empty(); // returns false

Notes:

    You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
    Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
    You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).



solution:
class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack = []
        self.helpstack = []

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        while self.stack:
            self.helpstack.append(self.stack.pop())
        self.helpstack.append(x)
        while self.helpstack:
            self.stack.append(self.helpstack.pop())

    
    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        if not self.stack:
            return
        return self.stack.pop()

    def peek(self) -> int:
        """
        Get the front element.
        """
        if not self.stack:
            return
        tmp = self.stack[-1]
        return tmp
    
    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        if not self.stack:
            return True
        else:
            return False
        
        #return not bool(self.stack) 这两种写法都可以



# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()



这道题目是让我们用栈来模拟实现队列。 
栈和队列都是一种受限的数据结构。 
栈的特点是只能在一端进行所有操作，队列的特点是只能在一端入队，另一端出队。

在这里我们可以借助另外一个栈，也就是说用两个栈来实现队列的效果。这种做法的时间复杂度和空间复杂度都是O(n)。

由于栈只能操作一端，因此我们peek或者pop的时候也只去操作顶部元素，要达到目的 我们需要在push的时候将队头的元素放到栈顶即可。

因此我们只需要在push的时候，用一下辅助栈即可。 具体做法是先将栈清空并依次放到另一个辅助栈中，辅助栈中的元素再次放回栈中，最后将新的元素push进去即可。

注意，在往stack中添加数字的时候用的是append而不是push
以及要注意两个堆栈来回push的时候到底数字谁在前面谁在后面



最后检测empty的错误写法：
    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        if not self.stack:
            return "true"
        else:
            return "false"
Python中关键字是True和False，所以要直接这么写，但是如果是"ture"或者"false"的话，
bool("true")==True
bool("false")==True
bool("")==False
所以返回的结果就是有问题的，错误的！
