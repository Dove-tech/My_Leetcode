quesiton:
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.

 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


solution:
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.min_stack = float('inf') #float('inf')表示正无穷，任何值减正无穷得到的也是正无穷，同理float('-inf')表示负无穷
        self.stack = []

    def push(self, x: int) -> None:
        self.stack.append(x - self.min_stack)  #先相减后入栈，然后再判断是否是最小值
        if x < self.min_stack:
            self.min_stack = x

    def pop(self) -> None:
        if not self.stack:
            return 
        tmp = self.stack.pop()  #pop是取出最上面那个值并返回那个值，而top是不取出，只返回最上面那个值
        if tmp < 0:
            self.min_stack = self.min_stack - tmp

    def top(self) -> int:
        if not self.stack:
            return
        tmp = self.stack[-1]   #这里注意不同的表达方式 ，一个是pop，一个是[-1]
        if tmp < 0:
            return self.min_stack
            self.min_stack = self.min_stack - tmp
        if tmp > 0:
            return self.min_stack + tmp 

    def getMin(self) -> int:
        return self.min_stack


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()


符合直觉的方法是，每次对栈进行修改操作（push和pop）的时候更新最小值。 
然后getMin只需要返回我们计算的最小值即可， top也是直接返回栈顶元素即可。 这种做法每次修改栈都需要更新最小值，因此时间复杂度是O(n).

更高效的做法：
我们每次入栈的时候，保存的不再是真正的数字，而是它与当前最小值的差（当前元素没有入栈的时候的最小值）。
这样我们pop和top的时候拿到栈顶元素再加上上一个最小值即可。 另外我们在push和pop的时候去更新min，这样getMin的时候就简单了，直接返回min。

    注意“上一个”，不是“当前的最小值”

经过上面的分析，问题的关键转化为“如果求的上一个最小值”，解决这个的关键点在于利用min。

pop或者top的时候：

    如果栈顶元素小于0，说明栈顶是当前最小的元素，它出栈会对min造成影响，我们需要去更新min。 
    上一个最小的是“min - 栈顶元素”,我们需要将上一个最小值更新为当前的最小值

    因为栈顶元素入栈的时候的通过 栈顶元素 = 真实值 - 上一个最小的元素 得到的， 而真实值 = min， 因此可以得出上一个最小的元素 = 真实值 -栈顶元素

    如果栈顶元素大于0，说明它对最小值没有影响，上一个最小值就是上上个最小值。

一定要注意是先计算差值push进去，然后再判断是否更新最小值
