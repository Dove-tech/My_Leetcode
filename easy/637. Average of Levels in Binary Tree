question:
Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.

Example 1:

Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].

solution:
class Solution:
    def averageOfLevels(self, root: TreeNode) -> List[float]:
        if not root:
            return [0]
        info = []
        def dfs(node, depth = 0):
            if node:
                if len(info) <= depth:
                    info.append([0, 0]) # 
                info[depth][0] += node.val
                info[depth][1] += 1
                dfs(node.left, depth + 1)
                dfs(node.right, depth + 1)
        dfs(root)

        return [s/float(c) for s, c in info] 
 采用简单的DFS来做
 Let's visit every node of the tree once, keeping track of what depth we are on. We can do this with a simple DFS.

When we visit a node, info[depth] will be a two element list, keeping track of the sum of the nodes we have seen at this depth, 
and the number of nodes we have seen. This is necessary and sufficient to be able to compute the average value at this depth.

At the end of our traversal, we can simply read off the answer
