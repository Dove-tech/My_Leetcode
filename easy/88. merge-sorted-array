question:
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

    The number of elements initialized in nums1 and nums2 are m and n respectively.
    You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.

Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]


solution:

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        while m > 0 and n > 0 :
            if nums1[m-1]<nums2[n-1]:
                nums1[m+n-1] = nums2[n-1]
                n = n-1
            else:
                nums1[m+n-1] = nums1[m-1]
                m = m-1
        if n>0:
            nums1[:m] = nums2[:n]
            
  这个题很容易让人联想到merge—sort，也就是合并排序，是分治法的一部分。（见算法导论中文版2 P24）
  但是在合并排序中我们会另外创建一个空间用用来填充，本题目要求把nums2合并到nums1中。
  因此我们依然采用遍历的形式一一对比，从后往前比较，然后在nums1从后往前赋值相应的数字即可。
  因为这两个数组已经排好序了，所以可以用这种方式遍历一遍即可。
  
  知识点：
  nums1[:m]表示从0到m
  
