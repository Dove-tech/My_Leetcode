question:
Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has piles[i] bananas.  The guards have gone and will come back in H hours.

Koko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses some pile of bananas, and eats K bananas from that pile.  If the pile has less than K bananas, she eats all of them instead, and won't eat any more bananas during this hour.

Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.

Return the minimum integer K such that she can eat all the bananas within H hours.

 

Example 1:

Input: piles = [3,6,7,11], H = 8
Output: 4

Example 2:

Input: piles = [30,11,23,4,20], H = 5
Output: 30

Example 3:

Input: piles = [30,11,23,4,20], H = 6
Output: 23


solution:
class Solution:
    def minEatingSpeed(self, piles: List[int], H: int) -> int:
        l=1
        r=max(piles)+1
        while l<r:
            m=l+(r-l)//2
            h=0
            for p in piles:
                h+=(p+m-1)//m

            if h<=H:
                r=m
            else:
                l=m+1
        return l
这是一个用二分法做得题。
符合直觉的做法是，选择最大的堆的香蕉数，然后试一下能不能行，如果不行则直接返回上次计算的结果， 
如果行，我们减少1个香蕉，试试行不行，依次类推。计算出刚好不行的即可。这种解法的时间复杂度是O(n)。
但实际上这个问题依然是在有序序列中查找最小值的问题！！！
所以用二分法做是最快的
要注意一个点：
h+=(p+m-1)//m可以实现向上取整的功能，相当于ceil函数
当然也可以用判断：
for x in piles:
                if x % K == 0:
                    hours += x // K
                else:
                    hours += x // K + 1
