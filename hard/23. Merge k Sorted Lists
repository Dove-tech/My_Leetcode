question:
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6



solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        heap = [(head.val, i, head) for i, head in enumerate(lists) if head]
        heapify(heap)
        dummy = cur = ListNode(0)
        while heap != []:
            val, i, node = heap[0]
            if not node.next:
                heappop(heap)
            else:
                heapreplace(heap, (node.next.val, i, node.next))
            cur.next = node
            cur = cur.next
        return dummy.next
    
    # i 是为了防止出现相等的val的时候，避免我们需要比较listnode类型的数据
    # 时间复杂度是n*k*logk， 整个while循环是n个k长度的list，堆排序的算法是logk
    
    
 本题采用堆排序的方法，python中有自动进行堆排序的heapify
 关于堆的知识点可以看刷题笔记
 heappop可以让最小值出堆，heapreplace可以让最小值出堆的同时将一个值插入到堆中，从而实现堆的迭代，一步一步找最小值
 对于元组进行排序，是先按照第一个元素排序，如果第一个元素相同，就按照第二个元素排序
 i是一个比较巧妙的办法，避免了按照元素排序的时候需要比较listnode类型的数据，其和huahua视频中提到的要记录每个数据在哪个链表有异曲同工之处
