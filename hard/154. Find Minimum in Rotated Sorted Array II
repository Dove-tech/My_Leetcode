question:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1

Example 2:

Input: [2,2,2,0,1]
Output: 0

solution:
class Solution:
    def findMin(self, nums: List[int]) -> int:
        def Min(nums,l,r):
            if nums == 0:
                return 0
            if l+1>=r:
                return min(nums[l],nums[r])
            if nums[l]<nums[r]:
                return nums[l]
            
            mid = l+(r-l)//2
            return min(Min(nums,l,mid-1),Min(nums,mid,r))
        
        return Min(nums,0,len(nums)-1)
        
   这个题关键在于 if nums[l]<nums[r]:
                return nums[l]
   有可能会出现这种情况，2 2 2 3 1 2，那么如果你比较l和r对应的值，他们相等的话，那么有可能会被认为是这是一个sorted数组
   所以要严格 nums[l]<nums[r]，从而防止这种情况的发生
