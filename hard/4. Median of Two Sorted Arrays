question:
here are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0

Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

solution:
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        length = len(nums1) + len(nums2)
        if len(nums1) > len(nums2):
            return self.findMedianSortedArrays(nums2, nums1)
        
        if len(nums1) == 0:
            if len(nums2)%2 == 0:
                return (nums2[(len(nums2)-1)//2] + nums2[(len(nums2)+1)//2]) / 2
            else:
                return nums2[len(nums2)//2]
            
        left = 0
        right = len(nums1)
        while right >= left:    
            cut_1 = (left + right) // 2
            cut_2 = (length+1)//2 - cut_1
            L2 = float('-inf') if cut_2 == 0 else nums2[cut_2-1]
            L1 = float('-inf') if cut_1 == 0 else nums1[cut_1-1]
            R2 = float('inf') if cut_2 == len(nums2) else nums2[cut_2]
            R1 = float('inf') if cut_1 == len(nums1) else nums1[cut_1]
            
            if L1 > R2:
                right = cut_1 - 1
            elif L2 > R1:
                left = cut_1 + 1
            else:
                if length%2 == 0:
                    return (max(L1, L2) + min(R1, R2))/2
                else:
                    return max(L1, L2)
                    
 本题要求时间复杂度是log（m+n）所以用普通的merge sort很显然是不行，必须要用二分法
 这个题的关键就是要理解最终结果的中位数是如何组成的，假设len为奇数，那么中位数为len//2位置的数，在这之前第一个数组提供M个，第二个数组提供N个
 关键是要确定M和N，因为N可以由M求出，所以关键是确定M
 符合标准的M是，M前小于N后，N前小于M后（因为M前一定小于M后，同理N），此时的M和N就是可以确定目标数组中位数的数，然后分情况对这四个数进行运算即可
